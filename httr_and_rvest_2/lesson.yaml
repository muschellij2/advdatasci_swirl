- Class: meta
  Course: advdatasci_swirl
  Lesson: 03_02_parsing_html_tables
  Author: John Muschelli
  Type: Standard
  Organization: JHU Biostatistics and DSL
  Version: 2.4.2.3

- Class: text
  Output: Last time we talked about the httr and rvest packages and we 
    will be continuing on with some data collection and parsing.

- Class: cmd_question
  Output: Let's load in the httr package (it's already loaded) again.
  CorrectAnswer: library(httr)
  AnswerTests: omnitest(correctExpr='library(httr)')
  Hint: Type library(httr)

- Class: cmd_question
  Output: We'll use the GET command again to grab the html from the webpage 
    of the CDC "http://www.cdc.gov/vaccines/programs/vfc/awardees/vaccine-management/price-list/"
    and assign it to ret.
  CorrectAnswer: ret <- GET("http://www.cdc.gov/vaccines/programs/vfc/awardees/vaccine-management/price-list/")
  AnswerTests: omnitest(correctExpr='ret <- GET("http://www.cdc.gov/vaccines/programs/vfc/awardees/vaccine-management/price-list/")')
  Hint: ret <- GET("http://www.cdc.gov/vaccines/programs/vfc/awardees/vaccine-management/price-list/")

- Class: cmd_question
  Output: Again let's assign the content of ret to something, let's call it page.
  CorrectAnswer: page <- content(ret)
  AnswerTests: omnitest(correctExpr='page <- content(ret)')
  Hint: page <- content(ret)

- Class: cmd_question
  Output: Now, let's load in the rvest library again.
  CorrectAnswer: library(rvest)
  AnswerTests: omnitest(correctExpr='library(rvest)')
  Hint: library(rvest)

- Class: mult_question
  Output: We are going to grab the tables from the webpage 
    (http://www.cdc.gov/vaccines/programs/vfc/awardees/vaccine-management/price-list/), 
    how many should there be?
  AnswerChoices: 1;2;3;4
  CorrectAnswer: 4
  AnswerTests: omnitest(correctVal='4')
  Hint: Look at the page

- Class: cmd_question
  Output: Now let's parse those tables with html_table from rvest, and assign that
    to the R object tabs.
  CorrectAnswer: tabs <- html_table(page)
  AnswerTests: omnitest(correctExpr='tabs <- html_table(page)')
  Hint: tabs <- html_table(page)

- Class: cmd_question
  Output: Print the length of tabs
  CorrectAnswer: length(tabs)
  AnswerTests: omnitest(correctExpr='length(tabs)')
  Hint: length(tabs)

- Class: cmd_question
  Output: Let's grab the 4th table (adult influenza vaccines) and assign it to flu.
  CorrectAnswer: flu <- tabs[[4]]
  AnswerTests: omnitest(correctExpr='flu <- tabs[[4]]')
  Hint: flu <- tabs[[4]]

- Class: cmd_question
  Output: Let's grab the column "Private Sector Cost/ Dose" of flu,
    using bracket ([, ]) notation, and put it into an 
    object called priv.
  CorrectAnswer: priv <- flu[, "Private Sector Cost/ Dose"]
  AnswerTests: omnitest(correctExpr='priv <- flu[, "Private Sector Cost/ Dose"]')
  Hint: priv <- flu[, "Private Sector Cost/ Dose"]

- Class: cmd_question
  Output: Let's look at the first few values of priv with head
  CorrectAnswer: head(priv)
  AnswerTests: omnitest(correctExpr='head(priv)')
  Hint: head(priv)
  
- Class: cmd_question
  Output: Let's try the mean of priv.
  CorrectAnswer: mean(priv)
  AnswerTests: omnitest(correctExpr='mean(priv)')
  Hint: mean(priv)

- Class: cmd_question
  Output: We see that it's NA, let's use the sub command to strip off the $ off of priv, 
    making sure to use fixed = TRUE, and re-assign it to priv.
  CorrectAnswer: priv <- sub("$", "", priv, fixed = TRUE)
  AnswerTests: omnitest(correctExpr='priv <- sub("$", "", priv, fixed = TRUE)')
  Hint: priv <- sub("$", "", priv, fixed = TRUE)

- Class: cmd_question
  Output: Let's take the mean of priv after making it a numeric
  CorrectAnswer: mean(as.numeric(priv))
  AnswerTests: omnitest(correctExpr='mean(as.numeric(priv))')
  Hint: mean(as.numeric(priv))
